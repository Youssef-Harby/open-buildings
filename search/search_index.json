{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to open-buildings","text":"<p>Tools for working with open building datasets</p> <ul> <li>Free software: Apache Software License 2.0</li> <li>Documentation: https://opengeos.github.io/open-buildings</li> <li>Creator: Chris Holmes</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>This repo is intended to be a set of useful scripts for working with Google's Open Buildings dataset, specifically to help translate it into Cloud Native Geospatial formats. The outputs will live at https://beta.source.coop/cholmes/google-open-buildings so most people can just make use of those directly. But these are intended to show the process, and then they've expanded to be a way to benchmark performance. It's an odd mix right now, if I have time I'll try to factor out an independent 'performance' CLI to compare processes without being specific to google open buildings and mixing in functionality like splitting multipolygons.</p> <p>This is basically my first Python project, and certainly my first open source one. It is only possible due to ChatGPT, as I'm not a python programmer, and not a great programmer in general (coded professionally for about 2 years, then shifted to doing lots of other stuff). So it's likely not great code, but it's been fun to iterate on it and seems like it might be useful to others.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install with pip:</p> <pre><code>pip install open-buildings\n</code></pre> <p>Now things may sorta work? I spent close to an hour battling this and it seems to install in the local repo directory, but not in the venv / path for some reason. So theoretically you should be able to run <code>gob-tools benchmark 36b_buildings.csv test-output --format parquet</code> from anywhere and have it work. Right now it's only working for me in the repo directory. I think the safest thing is to just do</p> <pre><code>python google-buildings-cli.py benchmark 36b_buildings.csv test-output --format parquet\n</code></pre> <p>with the python file. Any help is more than welcome. Maybe next I'll try poetry? This python package management shit is really as bad as everyone says, even ChatGPT wasn't able to get me there.</p> <p>The only CSV files that will work are those from Google's Open Buildings dataset.</p>"},{"location":"#functionality","title":"Functionality","text":"<p>So far there is just one 'tool', a CLI built with click that performs two functions:</p> <ul> <li><code>convert</code> takes as input either a single CSV file or a directory of CSV files, downloaded locally from the Google Buildings dataset. It can write out as GeoParquet, FlatGeobuf, GeoPackage and Shapefile, and can process the data using DuckDB, GeoPandas or OGR.</li> <li><code>benchmark</code> runs the convert command against one or more different formats, and one or more different processes, and reports out how long each took.</li> </ul> <p>A sample output for <code>benchmark</code>, run on 36b_buildings.csv, a 130 mb CSV file is:</p> <pre><code>\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502 process   \u2502 fgb            \u2502 gpkg           \u2502 parquet        \u2502 shp            \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 duckdb    \u2502 0:00:04.287083 \u2502 0:01:52.222495 \u2502 0:00:02.880891 \u2502 0:00:05.404221 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ogr       \u2502 0:00:03.620750 \u2502 0:00:08.528865 \u2502 0:00:02.319576 \u2502 0:00:03.609031 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 pandas    \u2502 0:00:35.763740 \u2502 0:00:47.535597 \u2502 0:00:04.880124 \u2502 0:00:37.751942 \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n</code></pre> <p>The full options can be found with <code>--help</code> after each command, and I'll put them here for reference:</p> <pre><code>Usage: gob-tools convert [OPTIONS] INPUT_PATH OUTPUT_DIRECTORY\n\nOptions:\n  --format [fgb|parquet|gpkg|shp]\n                                  The output format.\n  --overwrite                     Whether to overwrite existing output files.\n  --process [duckdb|pandas|ogr]   The processing method to use.\n  --skip-split-multis             Whether to keep multipolygons as they are\n                                  without splitting into their component\n                                  polygons.\n  --verbose                       Whether to print detailed processing\n                                  information.\n  --help                          Show this message and exit.\n</code></pre> <pre><code>Usage: gob-tools benchmark [OPTIONS] INPUT_PATH OUTPUT_DIRECTORY\n\nOptions:\n  --processes TEXT      The processing methods to use.\n  --formats TEXT        The output formats.\n  --skip-split-multis   Whether to keep multipolygons as they are without\n                        splitting into their component polygons.\n  --no-gpq              Disable GPQ conversion.\n  --verbose             Whether to print detailed processing information.\n  --output-format TEXT  The format of the output. Options: ascii, csv, json.\n  --help                Show this message and exit.\n</code></pre>"},{"location":"#format-notes","title":"Format Notes","text":"<p>I'm mostly focused on GeoParquet and FlatGeobuf, as good cloud-native geo formats. I included GeoPackage and Shapefile mostly for benchmarking purposes. GeoPackage I think is a good option for Esri and other more legacy software that is slow to adopt new formats. Shapefile is total crap for this use case - it fails on files bigger than 4 gigabytes, and lots of the source S2 Google Building CSV's are bigger, so it's not useful for translating. The truncation of field names is also annoying, since the CSV file didn't try to make short names (nor should it, the limit is silly).</p> <p>GeoPackage is particularly slow with DuckDB, it's likely got a bit of a bug in it. But it works well with Pandas and OGR.</p>"},{"location":"#process-notes","title":"Process Notes","text":"<p>When I was processing V2 of the Google Building's dataset I did most of the initial work with GeoPandas, which was awesome, and has the best GeoParquet implementation. But the size of the data made its all in memory processing untenable. I ended up using PostGIS a decent but, but near the end of that process I discovered DuckDB, and was blown away by it's speed and ability to manage memory well. So for this tool I was mostly focused on those two.</p> <p>Note that GeoParquet from DuckDB by default runs gpq on the DuckDB Parquet output, which adds a good chunk of processing time. This makes it so the DuckDB processing output is slower than it would be if DuckDB natively wrote GeoParquet metadata, which I believe is on their roadmap. So that will likely emerge as the fastest benchmark time. In the code you can set RUN_GPQ_CONVERSION to false if you want to get a sense of it. In the above benchmark running the Parquet with DuckDB without GPQ conversion at the end resulted in a time of 0:00:01.845316</p> <p>Note also that currently DuckDB fgb, gpkg and shp output don't include projection information, so if you want to use the output then you'd need to run ogr2ogr on the output. It sounds like that may get fixed pretty soon, so I'm not going to add a step that includes the ogr conversion.</p> <p>OGR was added later, and as of yet does not yet do the key step of splitting multi-polygons, since it's just using ogr2ogr as a sub-process and I've yet to find a way to do that from the CLI (though knowing GDAL/OGR there probably is one - please let me know). To run the benchmark with it you need to do --skip-split-multis or else the times on it will be 0 (except for Shapefile, since it doesn't differentiate between multipolygons and regular polygons). I hope to add that functionality and get it on par, which may mean using Fiona. But it seems like that may affect performance, since Fiona doesn't use the GDAL/OGR column-oriented API.</p>"},{"location":"#roadmap","title":"Roadmap","text":"<p>The next tool to write is to add country and admin level 1 attributes from GeoBoundaries. This was the trickiest step in processing v2 buildings. This will be an interesting to benchmark, with the options being more like DuckDB and PostGIS (pandas could try but may not work on the biggest ones), and potentially even big query. The next functionality to add after that will be do spatial partitioning, and perhaps after that add Iceberg and Delta Lake and compare those two (I didn't get to that step with the v2 buildings). And perhaps I'll also add a tool to easily grab any data from the partitioned geoparquet on source.coop and get it in the format you want.</p>"},{"location":"#ideas","title":"Ideas","text":"<p>I'll try to turn these into tickets, but just wanted to jot down some ways I've thought about evolving the script.</p> <ul> <li>Make GPQ a flag to pass in, not hardcoded.</li> <li>Make parquet compression options a flag to pass in and raise appropriate errors about which one can be used.</li> <li>Add the splitting of multipolygons to the ogr process. This may need to make use of Fiona, but that may lose the speed of the column-oriented API - so may be interesting to have both options to benchmark.</li> <li>Include ability to get the source CSV's directly from the cloud, unzip them and process them.</li> <li>Print out the file sizes of the resulting formats in the benchmark.</li> <li>Add GeoJSON? It seems like crap for this goal of working with huge files, but could be interesting to show performance and size characteristics. I do love GeoJSON, it's one of the best formats, but this is not the use case for it.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#open_buildings.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>open_buildings/common.py</code> <pre><code>def hello_world():\n\"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/opengeos/open-buildings/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>open-buildings could always use more documentation, whether as part of the official open-buildings docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/opengeos/open-buildings/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up open-buildings for local development.</p> <ol> <li> <p>Fork the open-buildings repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/open-buildings.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv open-buildings\n$ cd open-buildings/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 open-buildings tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/opengeos/open-buildings/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install open-buildings, run this command in your terminal:</p> <pre><code>pip install open-buildings\n</code></pre> <p>This is the preferred method to install open-buildings, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install open-buildings from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/opengeos/open-buildings\n</code></pre>"},{"location":"open_buildings/","title":"open_buildings module","text":""},{"location":"usage/","title":"Usage","text":"<p>To use open-buildings in a project:</p> <pre><code>import open_buildings\n</code></pre>"},{"location":"examples/download_buildings/","title":"Download buildings","text":"In\u00a0[1]: Copied! <pre># %pip install open-buildings\n</pre> # %pip install open-buildings <p>Iimport libraries</p> In\u00a0[2]: Copied! <pre>import os\nimport leafmap.foliumap as leafmap\nimport geopandas as gpd\n</pre> import os import leafmap.foliumap as leafmap import geopandas as gpd <p>Read the tile geojson.</p> In\u00a0[3]: Copied! <pre>url = 'https://sites.research.google/open-buildings/tiles.geojson'\ngdf = gpd.read_file(url)\ngdf.sort_values(by='size_mb', ascending=True, inplace=True)\ngdf.head()\n</pre> url = 'https://sites.research.google/open-buildings/tiles.geojson' gdf = gpd.read_file(url) gdf.sort_values(by='size_mb', ascending=True, inplace=True) gdf.head() Out[3]: tile_id tile_url size_mb geometry 320 971 https://storage.googleapis.com/open-buildings-... 0.0 POLYGON ((-84.94013 -28.57907, -84.94013 -34.4... 27 0e1 https://storage.googleapis.com/open-buildings-... 0.0 POLYGON ((-5.05987 16.47390, 0.00000 16.53484,... 227 815 https://storage.googleapis.com/open-buildings-... 0.0 POLYGON ((-118.67315 25.63227, -118.67315 20.0... 228 83f https://storage.googleapis.com/open-buildings-... 0.0 POLYGON ((-118.67315 20.08096, -118.67315 14.5... 211 3d1 https://storage.googleapis.com/open-buildings-... 0.0 POLYGON ((50.01877 3.88131, 55.49148 4.17302, ... In\u00a0[4]: Copied! <pre>print(f\"Number of tiles: {len(gdf)}\")\n</pre> print(f\"Number of tiles: {len(gdf)}\") <pre>Number of tiles: 333\n</pre> In\u00a0[5]: Copied! <pre>m = leafmap.Map()\nm.add_gdf(gdf, layer_name=\"Open Buildings\")\nm\n</pre> m = leafmap.Map() m.add_gdf(gdf, layer_name=\"Open Buildings\") m Out[5]: <p>Get the tile URLs.</p> In\u00a0[6]: Copied! <pre>urls = gdf['tile_url'].tolist()\nurls[:5]\n</pre> urls = gdf['tile_url'].tolist() urls[:5] Out[6]: <pre>['https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/971_buildings.csv.gz',\n 'https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/0e1_buildings.csv.gz',\n 'https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/815_buildings.csv.gz',\n 'https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/83f_buildings.csv.gz',\n 'https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/3d1_buildings.csv.gz']</pre> <p>Specify the output directory.</p> In\u00a0[7]: Copied! <pre>out_dir = os.path.expanduser('~/Downloads/')\n</pre> out_dir = os.path.expanduser('~/Downloads/') <p>Download all the tiles might take a while. Let's download only the first 10 tiles.</p> In\u00a0[8]: Copied! <pre>leafmap.download_files(urls[:10], out_dir=out_dir)\n</pre> leafmap.download_files(urls[:10], out_dir=out_dir) <pre>Downloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/971_buildings.csv.gz\nTo: /home/runner/Downloads/971_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6.15k/6.15k [00:00&lt;00:00, 3.63MB/s]\nDownloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/0e1_buildings.csv.gz\nTo: /home/runner/Downloads/0e1_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5.80k/5.80k [00:00&lt;00:00, 3.87MB/s]\nDownloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/815_buildings.csv.gz\nTo: /home/runner/Downloads/815_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 38.7k/38.7k [00:00&lt;00:00, 3.11MB/s]\nDownloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/83f_buildings.csv.gz\nTo: /home/runner/Downloads/83f_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.32k/1.32k [00:00&lt;00:00, 4.31MB/s]\nDownloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/3d1_buildings.csv.gz\nTo: /home/runner/Downloads/3d1_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.96k/1.96k [00:00&lt;00:00, 6.32MB/s]\nDownloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/3ef_buildings.csv.gz\nTo: /home/runner/Downloads/3ef_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 43.6k/43.6k [00:00&lt;00:00, 6.37MB/s]\nDownloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/855_buildings.csv.gz\nTo: /home/runner/Downloads/855_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2.64k/2.64k [00:00&lt;00:00, 1.73MB/s]\nDownloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/32b_buildings.csv.gz\nTo: /home/runner/Downloads/32b_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 12.2k/12.2k [00:00&lt;00:00, 25.5MB/s]\nDownloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/013_buildings.csv.gz\nTo: /home/runner/Downloads/013_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.11k/1.11k [00:00&lt;00:00, 2.44MB/s]\nDownloading...\nFrom: https://storage.googleapis.com/open-buildings-data/v3/polygons_s2_level_4_gzip/973_buildings.csv.gz\nTo: /home/runner/Downloads/973_buildings.csv.gz\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4.22k/4.22k [00:00&lt;00:00, 12.2MB/s]\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import open_buildings as ob\n</pre> import open_buildings as ob"}]}